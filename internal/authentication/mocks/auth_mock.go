// Code generated by MockGen. DO NOT EDIT.
// Source: internal/authentication/auth.go

// Package mock_authentication is a generated GoMock package.
package mock_authentication

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	authentication "github.com/mkarulina/loyalty-system-service.git/internal/authentication"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// AddUserInfoToTable mocks base method.
func (m *MockAuth) AddUserInfoToTable(user authentication.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserInfoToTable", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserInfoToTable indicates an expected call of AddUserInfoToTable.
func (mr *MockAuthMockRecorder) AddUserInfoToTable(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserInfoToTable", reflect.TypeOf((*MockAuth)(nil).AddUserInfoToTable), user)
}

// CheckTokenIsValid mocks base method.
func (m *MockAuth) CheckTokenIsValid(token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTokenIsValid", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTokenIsValid indicates an expected call of CheckTokenIsValid.
func (mr *MockAuthMockRecorder) CheckTokenIsValid(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTokenIsValid", reflect.TypeOf((*MockAuth)(nil).CheckTokenIsValid), token)
}

// CheckUserData mocks base method.
func (m *MockAuth) CheckUserData(user authentication.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserData", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserData indicates an expected call of CheckUserData.
func (mr *MockAuthMockRecorder) CheckUserData(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserData", reflect.TypeOf((*MockAuth)(nil).CheckUserData), user)
}

// GetUserLoginByToken mocks base method.
func (m *MockAuth) GetUserLoginByToken(token string, db *sql.DB) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoginByToken", token, db)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLoginByToken indicates an expected call of GetUserLoginByToken.
func (mr *MockAuthMockRecorder) GetUserLoginByToken(token, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoginByToken", reflect.TypeOf((*MockAuth)(nil).GetUserLoginByToken), token, db)
}
