// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/orders.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/mkarulina/loyalty-system-service.git/internal/storage"
)

// MockOrderStorage is a mock of OrderStorage interface.
type MockOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorageMockRecorder
}

// MockOrderStorageMockRecorder is the mock recorder for MockOrderStorage.
type MockOrderStorageMockRecorder struct {
	mock *MockOrderStorage
}

// NewMockOrderStorage creates a new mock instance.
func NewMockOrderStorage(ctrl *gomock.Controller) *MockOrderStorage {
	mock := &MockOrderStorage{ctrl: ctrl}
	mock.recorder = &MockOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorage) EXPECT() *MockOrderStorageMockRecorder {
	return m.recorder
}

// AddOrderNumber mocks base method.
func (m *MockOrderStorage) AddOrderNumber(order, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderNumber", order, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrderNumber indicates an expected call of AddOrderNumber.
func (mr *MockOrderStorageMockRecorder) AddOrderNumber(order, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderNumber", reflect.TypeOf((*MockOrderStorage)(nil).AddOrderNumber), order, token)
}

// GetUnprocessedOrders mocks base method.
func (m *MockOrderStorage) GetUnprocessedOrders() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessedOrders")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessedOrders indicates an expected call of GetUnprocessedOrders.
func (mr *MockOrderStorageMockRecorder) GetUnprocessedOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessedOrders", reflect.TypeOf((*MockOrderStorage)(nil).GetUnprocessedOrders))
}

// GetUserBalanceAndWithdrawn mocks base method.
func (m *MockOrderStorage) GetUserBalanceAndWithdrawn(token string) (float32, float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalanceAndWithdrawn", token)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(float32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserBalanceAndWithdrawn indicates an expected call of GetUserBalanceAndWithdrawn.
func (mr *MockOrderStorageMockRecorder) GetUserBalanceAndWithdrawn(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalanceAndWithdrawn", reflect.TypeOf((*MockOrderStorage)(nil).GetUserBalanceAndWithdrawn), token)
}

// GetUserOrders mocks base method.
func (m *MockOrderStorage) GetUserOrders(token string) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", token)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockOrderStorageMockRecorder) GetUserOrders(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockOrderStorage)(nil).GetUserOrders), token)
}

// UpdateOrdersStatus mocks base method.
func (m *MockOrderStorage) UpdateOrdersStatus(orders []storage.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrdersStatus", orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrdersStatus indicates an expected call of UpdateOrdersStatus.
func (mr *MockOrderStorageMockRecorder) UpdateOrdersStatus(orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrdersStatus", reflect.TypeOf((*MockOrderStorage)(nil).UpdateOrdersStatus), orders)
}

// WithdrawUserPoints mocks base method.
func (m *MockOrderStorage) WithdrawUserPoints(token, order string, sum float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawUserPoints", token, order, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawUserPoints indicates an expected call of WithdrawUserPoints.
func (mr *MockOrderStorageMockRecorder) WithdrawUserPoints(token, order, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawUserPoints", reflect.TypeOf((*MockOrderStorage)(nil).WithdrawUserPoints), token, order, sum)
}
